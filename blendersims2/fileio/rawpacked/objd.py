#!/usr/bin/python3
#-*- coding: utf-8 -*-

from blendersims2.fileio.tgir import PackedFile
from blendersims2.fileio.rawpacked.common import RawPacked
from blendersims2.fileio.dumputils import indented_print
from blendersims2.fileio.parseutils import ParseNullTerminatedString

class OBJD(RawPacked):
    """Sims2 3D ID Referencing File"""

    typeEnum = PackedFile.OBJD
    
    def extract(self, dg, verbose=True, debug=True):
        self.stupid_namelen = False
        self.unused = []

        self.name = ParseNullTerminatedString(dg, size=64, verbose=verbose)
        self.version = dg.get_dword()
        self.stack_size = dg.get_word()
        self.wall_adjacent_flags = dg.get_word()
        self.placement_flags = dg.get_word()
        self.wall_placement_flags = dg.get_word()
        self.allowed_height_flags = dg.get_word()
        self.interaction_pointer = dg.get_word()
        self.interaction_group = dg.get_word()
        self.object_type = dg.get_word()
        self.multitile_master = dg.get_word()
        self.multitile_subindex = dg.get_word()
        self.use_default_placement_flags = dg.get_word()
        self.look_at_score = dg.get_word()
        self.guid = dg.get_dword()
        self.unlockable = dg.get_word()
        self.catalog_use_flags = dg.get_word()
        self.price = dg.get_word()
        self.str_ref = dg.get_word()
        self.slot_ref = dg.get_word()
        self.diagonal_guid = dg.get_dword()
        self.grid_guid = dg.get_dword()
        self.ownership = dg.get_word()
        self.ignore_globalsim = dg.get_word()
        self.no_move_out = dg.get_word()
        self.hauntable = dg.get_word()
        self.proxy_guid = dg.get_dword()
        self.slot_group = dg.get_word()
        self.aspiration_flags = dg.get_word()
        self.memory_effect = dg.get_word()
        self.sale_price = dg.get_word()
        self.init_depreciation = dg.get_word()
        self.daily_depreciation = dg.get_word()
        self.self_depreciating = dg.get_word()
        self.depreciation_limit = dg.get_word()
        self.room_sort_flags = dg.get_word()
        self.function_sort_flags = dg.get_word()
        self.cats_ptr = dg.get_word()
        self.is_global = dg.get_word()
        self.tooltip_type = dg.get_word()
        self.template_ver = dg.get_word()
        self.niceness_multiplier = dg.get_word()
        self.no_duplicate = dg.get_word()
        self.want_category = dg.get_word()
        self.no_new_name = dg.get_word()
        self.object_ver = dg.get_word()
        self.default_thumb = dg.get_word()
        self.motive_effects = dg.get_word()
        self.job_object_guid = dg.get_dword()
        self.catalog_popup_id = dg.get_word()
        self.ignore_model_index = dg.get_word()
        self.level_offset = dg.get_word()
        self.shadow_type = dg.get_word()
        self.num_attributes = dg.get_word()
        self.num_obj_arrays = dg.get_word()
        self.for_sale_flags = dg.get_word()
        self.front_direction = dg.get_word()
        self.unused.append(dg.get_word())
        self.lead_object = dg.get_word()
        self.expansion = dg.get_dword()
        self.chair_entry_flags = dg.get_word()
        self.tile_width = dg.get_word()
        self.inhibit_suit_copying = dg.get_word()
        self.build_mode_type = dg.get_word()
        self.original_guid = dg.get_dword()
        self.object_model_guid = dg.get_dword()
        self.build_mode_subsort = dg.get_word()
        self.selector_category = dg.get_word()
        self.selector_sub_category = dg.get_word()
        self.footprint_mask = dg.get_word()
        self.extend_footprint = dg.get_word()
        self.object_size = dg.get_word()
        self.unused.extend(dg.get_words(2))
        self.hunger_rating = dg.get_word()
        self.comfort_rating = dg.get_word()
        self.hygiene_rating = dg.get_word()
        self.bladder_rating = dg.get_word()
        self.energy_rating = dg.get_word()
        self.fun_rating = dg.get_word()
        self.room_rating = dg.get_word()
        self.skill_flags = dg.get_word()
        self.num_type_attributes = dg.get_word()
        self.misc_flags = dg.get_word()
        self.unused.extend(dg.get_words(2))
        self.function_subsort = dg.get_word()
        self.downtown_sort = dg.get_word()
        self.keep_buying = dg.get_word()
        self.vacation_sort = dg.get_word()
        self.reset_lot_action = dg.get_word()
        self.td_object_type = dg.get_word()
        self.community_sort = dg.get_word()
        self.dream_flags = dg.get_word()
        self.thumbnail_flags = dg.get_word()
        self.scratch_rating = dg.get_word()
        self.chew_rating = dg.get_word()
        self.unused.extend(dg.get_words(2))
        self.requirements = dg.get_word()

        # There's an obscure case here which makes this harder than it needs to be. Usually the name length is a
        # dword but sometimes it's just a byte. I can see no way to distinguish the two, so have to see how much is
        # left and see if it matches
        namelen = dg.get_byte()
        if namelen == dg.remaining():
            self.stupid_namelen = True
        else:
            tmp = dg.get_bytes(3)
            namelen = tmp[2] * (1 << 24) + tmp[1] * (1 << 16) + tmp[0] * (1 << 8) + namelen
        #namelen = dg.get_dword()
        self.filename = dg.get_string(namelen)
        
    def dump(self, indent=0):
        super(OBJD, self).dump(indent)
        indented_print(indent+1, "Name: %s" % self.name)
        indented_print(indent+1, "Version: %d" % self.version)
        indented_print(indent+1, "Initial Stack Size: %d" % self.stack_size)
        indented_print(indent+1, "Wall Adjacent Flags: 0x%04x" % self.wall_adjacent_flags)
        indented_print(indent+1, "Placement Flags: 0x%04x" % self.placement_flags)
        indented_print(indent+1, "Wall Placement Flags: 0x%04x" % self.wall_placement_flags)
        indented_print(indent+1, "Allowed Height Flags: 0x%04x" % self.allowed_height_flags)
        indented_print(indent+1, "Interaction Table ID: 0x%04x" % self.interaction_pointer)
        indented_print(indent+1, "Interaction Group: 0x%04x" % self.interaction_group)
        indented_print(indent+1, "Object Type: 0x%04x" % self.object_type)
        indented_print(indent+1, "Multi-tile Master ID: 0x%04x" % self.multitile_master)
        indented_print(indent+1, "Multi-tile Sub-index: 0x%04x" % self.multitile_subindex)
        indented_print(indent+1, "Use Default Placement Flags: 0x%04x" % self.use_default_placement_flags)
        indented_print(indent+1, "Look at Score: 0x%04x" % self.look_at_score)
        indented_print(indent+1, "GUID: 0x%08x" % self.guid)
        indented_print(indent+1, "Item is Unlockable: 0x%04x" % self.unlockable)
        indented_print(indent+1, "Catalog Use Flags: 0x%04x" % self.catalog_use_flags)
        indented_print(indent+1, "Price: 0x%04x" % self.price)
        indented_print(indent+1, "Body Strings ID: 0x%04x" % self.str_ref)
        indented_print(indent+1, "Slots ID: 0x%04x" % self.slot_ref)
        indented_print(indent+1, "Diagonal Selector GUID: 0x%08x" % self.diagonal_guid)
        indented_print(indent+1, "Grid-aligned Selector GUID: 0x%08x" % self.grid_guid)
        indented_print(indent+1, "Ignore GlobalSIm field in CAS lot: 0x%04x" % self.ignore_globalsim)
        indented_print(indent+1, "Cannot Move Out With: 0x%04x" % self.no_move_out)
        indented_print(indent+1, "Hauntable: 0x%04x" % self.hauntable)
        indented_print(indent+1, "Proxy GUID: 0x%08x" % self.proxy_guid)
        indented_print(indent+1, "Slot group: 0x%04x" % self.slot_group)
        indented_print(indent+1, "Aspiration Flags: 0x%04x" % self.aspiration_flags)
        indented_print(indent+1, "Memory Nice/Bad: 0x%04x" % self.memory_effect)
        indented_print(indent+1, "Sale Price: 0x%04x" % self.sale_price)
        indented_print(indent+1, "Initial depreciation: 0x%04x" % self.init_depreciation)
        indented_print(indent+1, "Daily depreciation: 0x%04x" % self.daily_depreciation)
        indented_print(indent+1, "Self depreciating: 0x%04x" % self.self_depreciating)
        indented_print(indent+1, "Depreciation limit: 0x%04x" % self.depreciation_limit)
        indented_print(indent+1, "Room sort flags: 0x%04x" % self.room_sort_flags)
        indented_print(indent+1, "Function sort flags: 0x%04x" % self.function_sort_flags)
        indented_print(indent+1, "Catalog strings ID: 0x%04x" % self.cats_ptr)
        indented_print(indent+1, "Is global sim object: 0x%04x" % self.is_global)
        indented_print(indent+1, "ToolTip Name Type: 0x%04x" % self.tooltip_type)
        indented_print(indent+1, "Template Version: 0x%04x" % self.template_ver)
        indented_print(indent+1, "Niceness Multiplier: 0x%04x" % self.niceness_multiplier)
        indented_print(indent+1, "No Duplicate On Placement: 0x%04x" % self.no_duplicate)
        indented_print(indent+1, "Want Category: 0x%04x" % self.want_category)
        indented_print(indent+1, "No New Name from Template: 0x%04x" % self.no_new_name)
        indented_print(indent+1, "Object version: 0x%04x" % self.object_ver)
        indented_print(indent+1, "Default Thumbnail ID: 0x%04x" % self.default_thumb)
        indented_print(indent+1, "Motive effects ID: 0x%04x" % self.motive_effects)
        indented_print(indent+1, "Job Object GUID: 0x%08x" % self.job_object_guid)
        indented_print(indent+1, "Catalog popup ID: 0x%04x" % self.catalog_popup_id)
        indented_print(indent+1, "Ignore Current Model Index In Icons: 0x%04x" % self.ignore_model_index)
        indented_print(indent+1, "Level offset: 0x%04x" % self.level_offset)
        indented_print(indent+1, "Shadow type: 0x%04x" % self.shadow_type)
        indented_print(indent+1, "Num attributes: 0x%04x" % self.num_attributes)
        indented_print(indent+1, "Number of object arrays: 0x%04x" % self.num_obj_arrays)
        indented_print(indent+1, "For sale flags: 0x%04x" % self.for_sale_flags)
        indented_print(indent+1, "Front direction: 0x%04x" % self.front_direction)
        indented_print(indent+1, "Multi-tile lead object: 0x%08x" % self.lead_object)
        indented_print(indent+1, "Expansion Flag: 0x%04x" % self.expansion)
        indented_print(indent+1, "Chair entry flags: 0x%04x" % self.chair_entry_flags)
        indented_print(indent+1, "Tile width: 0x%04x" % self.tile_width)
        indented_print(indent+1, "Inhibit suit copying: 0x%04x" % self.inhibit_suit_copying)
        indented_print(indent+1, "Build mode type: 0x%04x" % self.build_mode_type)
        indented_print(indent+1, "Original GUID: 0x%08x" % self.original_guid)
        indented_print(indent+1, "Object model GUID: 0x%08x" % self.object_model_guid)
        indented_print(indent+1, "Build Mode Subsort: 0x%04x" % self.build_mode_subsort)
        indented_print(indent+1, "Selector Category: 0x%04x" % self.selector_category)
        indented_print(indent+1, "Selector Sub-category: 0x%04x" % self.selector_sub_category)
        indented_print(indent+1, "Footprint mask: 0x%04x" % self.footprint_mask)
        indented_print(indent+1, "Extended Footprint: 0x%04x" % self.extend_footprint)
        indented_print(indent+1, "Object Size: 0x%04x" % self.object_size)
        indented_print(indent+1, "Hunger rating: 0x%04x" % self.hunger_rating)
        indented_print(indent+1, "Comfort rating: 0x%04x" % self.comfort_rating)
        indented_print(indent+1, "Hygiene rating: 0x%04x" % self.hygiene_rating)
        indented_print(indent+1, "Bladder rating: 0x%04x" % self.bladder_rating)
        indented_print(indent+1, "Energy rating: 0x%04x" % self.energy_rating)
        indented_print(indent+1, "Fun rating: 0x%04x" % self.fun_rating)
        indented_print(indent+1, "Room rating: 0x%04x" % self.room_rating)
        indented_print(indent+1, "Skill Flags: 0x%04x" % self.skill_flags)
        indented_print(indent+1, "Num type attributes: 0x%04x" % self.num_type_attributes)
        indented_print(indent+1, "Misc flags: 0x%04x" % self.misc_flags)
        indented_print(indent+1, "Function Sub-Sort: 0x%04x" % self.function_subsort)
        indented_print(indent+1, "Downtown Sort: 0x%04x" % self.downtown_sort)
        indented_print(indent+1, "Keep Buying: 0x%04x" % self.keep_buying)
        indented_print(indent+1, "Vacation Sort: 0x%04x" % self.vacation_sort)
        indented_print(indent+1, "Reset Lot Action: 0x%04x" % self.reset_lot_action)
        indented_print(indent+1, "3D Object Type: 0x%04x" % self.td_object_type)
        indented_print(indent+1, "Community Sort: 0x%04x" % self.community_sort)
        indented_print(indent+1, "Dream Flags: 0x%04x" % self.dream_flags)
        indented_print(indent+1, "Thumbnail Flags: 0x%04x" % self.thumbnail_flags)
        indented_print(indent+1, "Scratch rating: 0x%04x" % self.scratch_rating)
        indented_print(indent+1, "Chew rating: 0x%04x" % self.chew_rating)
        indented_print(indent+1, "Requirements: 0x%04x" % self.requirements)
        indented_print(indent+1, "Filename: %s" % self.filename)

OBJD.register_raw()
